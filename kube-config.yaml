apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: default
spec:
  selector:
    matchLabels:
      run: web
  template:
    metadata:
      labels:
        run: web
    spec:
      containers:
        - image: us.gcr.io/marketfeels/front-end:latest
          imagePullPolicy: IfNotPresent
          name: web
          ports:
            - containerPort: 3000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: default
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    run: web
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-api
  namespace: default
spec:
  selector:
    matchLabels:
      run: java-api
  template:
    metadata:
      labels:
        run: java-api
    spec:
      containers:
        - image: us.gcr.io/marketfeels/java-api:latest
          imagePullPolicy: IfNotPresent
          name: java-api
          ports:
            - containerPort: 8080
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: java-api
  namespace: default
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    run: java-api
  type: NodePort
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: dual-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: 'web-static-ip'
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: web
              servicePort: 3000
          - path: /api/*
            backend:
              serviceName: java-api
              servicePort: 8080
